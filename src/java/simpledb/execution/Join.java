package simpledb.execution;

import simpledb.common.DbException;
import simpledb.common.Type;
import simpledb.storage.IntField;
import simpledb.storage.Tuple;
import simpledb.storage.TupleDesc;
import simpledb.transaction.TransactionAbortedException;

import java.util.NoSuchElementException;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    JoinPredicate p;

    OpIterator[] children;

    Tuple tuple1;
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     *
     * @param p      The predicate to use to join the children
     * @param child1 Iterator for the left(outer) relation to join
     * @param child2 Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // TODO: some code goes here
        this.p = p;
        children = new OpIterator[2];
        children[0] = child1;
        children[1] = child2;
    }

    public JoinPredicate getJoinPredicate() {
        // TODO: some code goes here
        return p;
    }

    /**
     * @return the field name of join field1. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField1Name() {
        // TODO: some code goes here
        return children[0].getTupleDesc().getFieldName(p.fieldNo1);
    }

    /**
     * @return the field name of join field2. Should be quantified by
     *         alias or table name.
     */
    public String getJoinField2Name() {
        // TODO: some code goes here
        return children[0].getTupleDesc().getFieldName(p.fieldNo2);
    }

    /**
     * @see TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *         implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // TODO: some code goes here
        TupleDesc child1 = children[0].getTupleDesc();
        TupleDesc child2 = children[1].getTupleDesc();
        Type[] typeAr = new Type[child1.numFields() + child2.numFields()];
        String[] fieldAr = new String[child1.numFields() + child2.numFields()];
        for(int i = 0; i < child1.numFields(); i++) {
            typeAr[i] = child1.getFieldType(i);
            fieldAr[i] = child1.getFieldName(i);
        }
        for(int i = child1.numFields(); i < child2.numFields() + child1.numFields(); i++) {
            typeAr[i] = child2.getFieldType(i - child1.numFields());
            fieldAr[i] = child2.getFieldName(i - child1.numFields());
        }
        return new TupleDesc(typeAr, fieldAr);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // TODO: some code goes here
        super.open();
        children[0].open();
        children[1].open();
    }

    public void close() {
        // TODO: some code goes here
        super.close();
        children[0].close();
        children[1].close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // TODO: some code goes here
        children[0].rewind();
        children[1].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     *
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // TODO: some code goes here
        while (children[0].hasNext() || tuple1 != null) {
            if(children[0].hasNext() && tuple1 == null) {
                tuple1 = children[0].next();
            }
            while (children[1].hasNext()) {
                Tuple tuple2 = children[1].next();
                if (p.filter(tuple1, tuple2)) {
                    TupleDesc tupleDesc = getTupleDesc();
                    Tuple tuple = new Tuple(tupleDesc);
                    int len1 = tuple1.getTupleDesc().numFields();
                    int len2 = tuple2.getTupleDesc().numFields();
                    for(int i = 0; i < len1; i++) {
                        tuple.setField(i, tuple1.getField(i));
                    }
                    for(int i = 0; i < len2; i++) {
                        tuple.setField(i + len1, tuple2.getField(i));
                    }
                    return tuple;
                }
            }
            tuple1 = null;
            children[1].rewind();
        }
        return null;
    }

    @Override
    public OpIterator[] getChildren() {
        // TODO: some code goes here
        return children;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // TODO: some code goes here
        this.children = children;
    }

}
